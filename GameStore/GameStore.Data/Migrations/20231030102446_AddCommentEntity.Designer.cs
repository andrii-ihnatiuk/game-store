// <auto-generated />
using System;
using GameStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.Data.Migrations
{
    [DbContext(typeof(GameStoreDbContext))]
    [Migration("20231030102446_AddCommentEntity")]
    partial class AddCommentEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ParentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("UnitInStock")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e9d1000-50e0-4bd8-8159-42c7431f32b5"),
                            Alias = "zelda-breath-of-the-wild",
                            Description = "An action-adventure game in an open world.",
                            Discontinued = false,
                            Name = "The Legend of Zelda: Breath of the Wild",
                            Price = 1500.2m,
                            PublisherId = new Guid("defd4ed1-a967-48af-83fb-4e5ffee412b0"),
                            UnitInStock = (short)50
                        },
                        new
                        {
                            Id = new Guid("95ffb14c-267a-432a-9d7c-22f887290d49"),
                            Alias = "gta-v",
                            Description = "An open-world action-adventure game.",
                            Discontinued = true,
                            Name = "Grand Theft Auto V",
                            Price = 500m,
                            PublisherId = new Guid("ec62c5de-e415-4e74-bc75-3a7606563c78"),
                            UnitInStock = (short)32
                        },
                        new
                        {
                            Id = new Guid("e2e928c4-ab49-4bc0-a904-37c34e1385cc"),
                            Alias = "overwatch-2",
                            Description = "Overwatch 2 is a free-to-play, team-based action game.",
                            Discontinued = false,
                            Name = "Overwatch 2",
                            Price = 1200m,
                            PublisherId = new Guid("3f8fc430-d0a5-4779-a3a4-5e0add54fde6"),
                            UnitInStock = (short)20
                        },
                        new
                        {
                            Id = new Guid("4b5f1e22-cd59-4523-a4e9-f0c0239ab820"),
                            Alias = "hearthstone",
                            Description = "Hearthstone is a fast-paced strategy card game from Blizzard Entertainment.",
                            Discontinued = false,
                            Name = "Hearthstone",
                            Price = 800m,
                            PublisherId = new Guid("3f8fc430-d0a5-4779-a3a4-5e0add54fde6"),
                            UnitInStock = (short)45
                        },
                        new
                        {
                            Id = new Guid("352997f0-9cb6-4951-8b55-10df09d2e168"),
                            Alias = "star-wars-jedi",
                            Description = "A 3rd person action-adventure title from Respawn.",
                            Discontinued = false,
                            Name = "Star Wars Jedi: Fallen Order",
                            Price = 1400m,
                            PublisherId = new Guid("08029ea0-8bd8-494c-b3c5-b65a61538f81"),
                            UnitInStock = (short)34
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("8e9d1000-50e0-4bd8-8159-42c7431f32b5"),
                            GenreId = new Guid("dd2bf352-9cfd-4b88-b46f-08217104f90d")
                        },
                        new
                        {
                            GameId = new Guid("8e9d1000-50e0-4bd8-8159-42c7431f32b5"),
                            GenreId = new Guid("e96511b9-e864-44cc-899f-8313609ffb63")
                        },
                        new
                        {
                            GameId = new Guid("95ffb14c-267a-432a-9d7c-22f887290d49"),
                            GenreId = new Guid("e96511b9-e864-44cc-899f-8313609ffb63")
                        },
                        new
                        {
                            GameId = new Guid("e2e928c4-ab49-4bc0-a904-37c34e1385cc"),
                            GenreId = new Guid("e96511b9-e864-44cc-899f-8313609ffb63")
                        },
                        new
                        {
                            GameId = new Guid("e2e928c4-ab49-4bc0-a904-37c34e1385cc"),
                            GenreId = new Guid("f82e27c8-760e-4cb8-866f-60bb33caeaac")
                        },
                        new
                        {
                            GameId = new Guid("4b5f1e22-cd59-4523-a4e9-f0c0239ab820"),
                            GenreId = new Guid("073f790e-a105-491d-965c-946e841c3b3e")
                        },
                        new
                        {
                            GameId = new Guid("4b5f1e22-cd59-4523-a4e9-f0c0239ab820"),
                            GenreId = new Guid("d9eaef23-9680-4d25-869b-4ed91847fd03")
                        },
                        new
                        {
                            GameId = new Guid("352997f0-9cb6-4951-8b55-10df09d2e168"),
                            GenreId = new Guid("e96511b9-e864-44cc-899f-8313609ffb63")
                        },
                        new
                        {
                            GameId = new Guid("352997f0-9cb6-4951-8b55-10df09d2e168"),
                            GenreId = new Guid("dd2bf352-9cfd-4b88-b46f-08217104f90d")
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatform");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("8e9d1000-50e0-4bd8-8159-42c7431f32b5"),
                            PlatformId = new Guid("83262eb9-517e-4581-b7ba-88b57c33d721")
                        },
                        new
                        {
                            GameId = new Guid("95ffb14c-267a-432a-9d7c-22f887290d49"),
                            PlatformId = new Guid("4adb2c38-f819-43cd-aa78-f46d482ceeb7")
                        },
                        new
                        {
                            GameId = new Guid("95ffb14c-267a-432a-9d7c-22f887290d49"),
                            PlatformId = new Guid("83262eb9-517e-4581-b7ba-88b57c33d721")
                        },
                        new
                        {
                            GameId = new Guid("e2e928c4-ab49-4bc0-a904-37c34e1385cc"),
                            PlatformId = new Guid("4adb2c38-f819-43cd-aa78-f46d482ceeb7")
                        },
                        new
                        {
                            GameId = new Guid("e2e928c4-ab49-4bc0-a904-37c34e1385cc"),
                            PlatformId = new Guid("83262eb9-517e-4581-b7ba-88b57c33d721")
                        },
                        new
                        {
                            GameId = new Guid("4b5f1e22-cd59-4523-a4e9-f0c0239ab820"),
                            PlatformId = new Guid("a9f806b4-28c5-4d7b-a776-65dfe029de8f")
                        },
                        new
                        {
                            GameId = new Guid("4b5f1e22-cd59-4523-a4e9-f0c0239ab820"),
                            PlatformId = new Guid("467762c6-8a10-4570-b829-e29de78a0757")
                        },
                        new
                        {
                            GameId = new Guid("4b5f1e22-cd59-4523-a4e9-f0c0239ab820"),
                            PlatformId = new Guid("4adb2c38-f819-43cd-aa78-f46d482ceeb7")
                        },
                        new
                        {
                            GameId = new Guid("352997f0-9cb6-4951-8b55-10df09d2e168"),
                            PlatformId = new Guid("467762c6-8a10-4570-b829-e29de78a0757")
                        },
                        new
                        {
                            GameId = new Guid("352997f0-9cb6-4951-8b55-10df09d2e168"),
                            PlatformId = new Guid("4adb2c38-f819-43cd-aa78-f46d482ceeb7")
                        },
                        new
                        {
                            GameId = new Guid("352997f0-9cb6-4951-8b55-10df09d2e168"),
                            PlatformId = new Guid("83262eb9-517e-4581-b7ba-88b57c33d721")
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("073f790e-a105-491d-965c-946e841c3b3e"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("04b04522-e758-4f8c-b58f-f59dd8de54b5"),
                            Name = "RTS",
                            ParentGenreId = new Guid("073f790e-a105-491d-965c-946e841c3b3e")
                        },
                        new
                        {
                            Id = new Guid("ead8a2bf-e751-47a9-a2fc-e8b6f643b0c8"),
                            Name = "TBS",
                            ParentGenreId = new Guid("073f790e-a105-491d-965c-946e841c3b3e")
                        },
                        new
                        {
                            Id = new Guid("5efe1909-c0b0-440e-8915-2831570816ec"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("13ba20d2-42fc-4eaa-a7f9-900782cabfc3"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("b3562f18-5e7c-411a-ab76-b675b78bd23d"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("2ba0604c-5515-470c-a500-58b60e8be000"),
                            Name = "Rally",
                            ParentGenreId = new Guid("b3562f18-5e7c-411a-ab76-b675b78bd23d")
                        },
                        new
                        {
                            Id = new Guid("e0e725ed-50ed-4ff7-94e7-38d0e1d2fa39"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("b3562f18-5e7c-411a-ab76-b675b78bd23d")
                        },
                        new
                        {
                            Id = new Guid("927cc631-c4f1-4feb-8a0c-9db6cd43402a"),
                            Name = "Formula",
                            ParentGenreId = new Guid("b3562f18-5e7c-411a-ab76-b675b78bd23d")
                        },
                        new
                        {
                            Id = new Guid("5d7545f5-a77a-4632-89c6-40f8756d2f75"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("b3562f18-5e7c-411a-ab76-b675b78bd23d")
                        },
                        new
                        {
                            Id = new Guid("e96511b9-e864-44cc-899f-8313609ffb63"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("f82e27c8-760e-4cb8-866f-60bb33caeaac"),
                            Name = "FPS",
                            ParentGenreId = new Guid("e96511b9-e864-44cc-899f-8313609ffb63")
                        },
                        new
                        {
                            Id = new Guid("837e2c69-c602-4038-9754-47b9c005a0a8"),
                            Name = "TPS",
                            ParentGenreId = new Guid("e96511b9-e864-44cc-899f-8313609ffb63")
                        },
                        new
                        {
                            Id = new Guid("dd2bf352-9cfd-4b88-b46f-08217104f90d"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("d9eaef23-9680-4d25-869b-4ed91847fd03"),
                            Name = "Puzzle & Skill"
                        },
                        new
                        {
                            Id = new Guid("956c4baf-e989-4046-b6cb-1d98df33cf6d"),
                            Name = "Misc."
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Sum")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GameStore.Data.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("GameStore.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77301abc-0738-4540-aa3a-19db9f6bc2dc"),
                            Description = "Use a bank of your choice to make payments!",
                            ImageUrl = "https://static.vecteezy.com/system/resources/thumbnails/000/594/232/small/B001.jpg",
                            Title = "Bank"
                        },
                        new
                        {
                            Id = new Guid("32bda162-d288-4a60-a684-9bd7caf61951"),
                            Description = "Simply pay with IBox!",
                            ImageUrl = "https://logowik.com/content/uploads/images/ibox9043.logowik.com.webp",
                            Title = "IBox terminal"
                        },
                        new
                        {
                            Id = new Guid("d84def54-1f51-4f1d-aedc-fc1d18b4fa12"),
                            Description = "Pay with your favourite card!",
                            ImageUrl = "https://d1yjjnpx0p53s8.cloudfront.net/styles/logo-thumbnail/s3/0013/4323/brand.gif?itok=fSmoZrGH",
                            Title = "Visa"
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9f806b4-28c5-4d7b-a776-65dfe029de8f"),
                            Type = "mobile"
                        },
                        new
                        {
                            Id = new Guid("467762c6-8a10-4570-b829-e29de78a0757"),
                            Type = "cloud"
                        },
                        new
                        {
                            Id = new Guid("4adb2c38-f819-43cd-aa78-f46d482ceeb7"),
                            Type = "desktop"
                        },
                        new
                        {
                            Id = new Guid("83262eb9-517e-4581-b7ba-88b57c33d721"),
                            Type = "console"
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f8fc430-d0a5-4779-a3a4-5e0add54fde6"),
                            CompanyName = "Activision",
                            Description = "Activision Publishing, Inc. is an American video game publisher based in Santa Monica, California.",
                            HomePage = "https://www.activision.com/"
                        },
                        new
                        {
                            Id = new Guid("08029ea0-8bd8-494c-b3c5-b65a61538f81"),
                            CompanyName = "Electronic Arts",
                            Description = "Electronic Arts Inc. is a global leader in digital interactive entertainment.",
                            HomePage = "https://www.ea.com/"
                        },
                        new
                        {
                            Id = new Guid("97fd0c5c-0504-4687-9a36-a65e699ca393"),
                            CompanyName = "Ubisoft",
                            Description = "Ubisoft Entertainment SA is a French video game company headquartered in Montreal.",
                            HomePage = "https://www.ubisoft.com/"
                        },
                        new
                        {
                            Id = new Guid("defd4ed1-a967-48af-83fb-4e5ffee412b0"),
                            CompanyName = "Nintendo",
                            Description = "Nintendo Co., Ltd.[b] is a Japanese multinational video game company headquartered in Kyoto.",
                            HomePage = "https://www.nintendo.com/"
                        },
                        new
                        {
                            Id = new Guid("ec62c5de-e415-4e74-bc75-3a7606563c78"),
                            CompanyName = "Rockstar Games",
                            Description = "Rockstar Games, Inc. is an American video game publisher based in New York City.",
                            HomePage = "https://www.rockstargames.com/"
                        });
                });

            modelBuilder.Entity("GameStore.Data.Entities.Comment", b =>
                {
                    b.HasOne("GameStore.Data.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Data.Entities.Comment", null)
                        .WithMany("Replies")
                        .HasForeignKey("ParentId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Game", b =>
                {
                    b.HasOne("GameStore.Data.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStore.Data.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStore.Data.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Data.Entities.Genre", "Genre")
                        .WithMany("GenreGames")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Data.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Data.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Data.Entities.Platform", "Platform")
                        .WithMany("PlatformGames")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Genre", b =>
                {
                    b.HasOne("GameStore.Data.Entities.Genre", null)
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Order", b =>
                {
                    b.HasOne("GameStore.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("GameStore.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("GameStore.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Data.Entities.Game", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Genre", b =>
                {
                    b.Navigation("GenreGames");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Platform", b =>
                {
                    b.Navigation("PlatformGames");
                });

            modelBuilder.Entity("GameStore.Data.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
